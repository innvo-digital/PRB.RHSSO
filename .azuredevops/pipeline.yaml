trigger:
  branches:
    include:
    - master
    - homolog
    - development

resources:
  repositories:
    - repository: templates
      type: git
      name: DevOps/AzureDevOps-Pipelines
      ref: master

jobs:
- job: 'Development'
  pool:
    name: Azure Servers
  variables:
    - group: "DEV - RHSSO"
  steps:
  - script: |
      echo "##vso[task.setvariable variable=cleanProjectName]$(echo $(Build.Repository.Name) | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]')"
    displayName: 'Set clean project name variable'


  - task: qetza.replacetokens.replacetokens-task.replacetokens@5
    displayName: 'Replace tokens in **/*.yaml'
    inputs:
      verbosity: 'detailed'
      actionOnNoFiles: fail
      actionOnMissing: fail
      targetFiles: |
        **/*.yaml
        **/*.cli 
        **/*.xml 



  - task: DockerCompose@1
    displayName: 'Build services $(Build.Repository.Name)'
    inputs:
      arguments: '--no-cache'
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: RedHat
      action: 'Build services'
      additionalImageTags: $(Build.BuildNumber)
      dockerComposeFile: '**/docker-compose.yml'
      projectName: '$(cleanProjectName)'

  - task: DockerCompose@1
    displayName: 'Push services $(Build.Repository.Name)'
    inputs:
      azureSubscription: 'AzurePRB_PROD_Enterprise'
      azureContainerRegistry: 'ocpreg.azurecr.io'
      action: 'Push services'
      additionalImageTags: $(Build.BuildNumber)
      dockerComposeFile: '**/docker-compose.yml'
      projectName: '$(cleanProjectName)'

  - task: PostBuildCleanup@4
    displayName: 'Clean Agent Directories'
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: deploy.yaml

  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/development'))

- job: 'Homolog'
  pool:
    name: Azure Servers
  variables:
    - group: "HOM - RHSSO"
  steps:
  - task: qetza.replacetokens.replacetokens-task.replacetokens@5
    displayName: 'Replace tokens in **/*.yaml'
    inputs:
      verbosity: 'detailed'
      actionOnNoFiles: fail
      actionOnMissing: fail
      targetFiles: |
        **/*.yaml
        **/*.cli 
        **/*.xml
  - script: |
      echo "##vso[task.setvariable variable=cleanProjectName]$(echo $(Build.Repository.Name) | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]')"
    displayName: 'Set clean project name variable'
  - task: DockerCompose@1
    displayName: 'Build services $(Build.Repository.Name)'
    inputs:
      arguments: '--no-cache'
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: RedHat
      action: 'Build services'
      additionalImageTags: $(Build.BuildNumber)
      dockerComposeFile: '**/docker-compose.yml'
      projectName: '$(cleanProjectName)'

  - task: DockerCompose@1
    displayName: 'Push services $(Build.Repository.Name)'
    inputs:
      azureSubscription: 'AzurePRB_PROD_Enterprise'
      azureContainerRegistry: 'ocpreg.azurecr.io'
      action: 'Push services'
      additionalImageTags: $(Build.BuildNumber)
      dockerComposeFile: '**/docker-compose.yml'
      projectName: '$(cleanProjectName)'

  - task: PostBuildCleanup@4
    displayName: 'Clean Agent Directories'
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: deploy.yaml

  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/homolog'))

- job: 'Production'
  pool:
    name: Azure Servers
  variables:
    - group: "PROD - RHSSO"
  steps:
  - task: qetza.replacetokens.replacetokens-task.replacetokens@5
    displayName: 'Replace tokens in **/*.yaml'
    inputs:
      verbosity: 'detailed'
      actionOnNoFiles: fail
      actionOnMissing: fail    
      targetFiles: |
        **/*.yaml
        **/*.cli
        **/*.xml
  - script: |
      echo "##vso[task.setvariable variable=cleanProjectName]$(echo $(Build.Repository.Name) | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]')"
    displayName: 'Set clean project name variable'  
  - task: DockerCompose@1
    displayName: 'Build services $(Build.Repository.Name)'
    inputs:
      arguments: '--no-cache'
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: RedHat
      action: 'Build services'
      additionalImageTags: $(Build.BuildNumber)
      dockerComposeFile: '**/docker-compose.yml'
      projectName: '$(cleanProjectName)'

  - task: DockerCompose@1
    displayName: 'Push services $(Build.Repository.Name)'
    inputs:
      azureSubscription: 'AzurePRB_PROD_Enterprise'
      azureContainerRegistry: 'ocpreg.azurecr.io'
      action: 'Push services'
      additionalImageTags: $(Build.BuildNumber)
      dockerComposeFile: '**/docker-compose.yml'
      projectName: '$(cleanProjectName)'

  - task: PostBuildCleanup@4
    displayName: 'Clean Agent Directories'
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: deploy.yaml

  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master'))